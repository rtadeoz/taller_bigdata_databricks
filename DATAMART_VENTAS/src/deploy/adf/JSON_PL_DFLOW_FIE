{
    "name": "FIES_Transform_DeudasImpagasBCP",
    "properties": {
        "type": "MappingDataFlow",
        "typeProperties": {
            "sources": [
                {
                    "dataset": {
                        "referenceName": "FIES_Parquet_UD_ClienteBCP",
                        "type": "DatasetReference"
                    },
                    "name": "UDClient",
                    "description": "Import data from FIES_Parquet_UD_ClienteBCP"
                },
                {
                    "dataset": {
                        "referenceName": "FIES_Parquet_UD_DeudasImpagasBCP",
                        "type": "DatasetReference"
                    },
                    "name": "UDUnpaidDebt",
                    "description": "Import data from FIES_Parquet_UD_CuentasCerradasBCP"
                }
            ],
            "sinks": [
                {
                    "dataset": {
                        "referenceName": "FIES_BlobTXT_DeudasImpagasBCP",
                        "type": "DatasetReference"
                    },
                    "name": "ExportarBlobTXT",
                    "description": "Exportar datos a FIES_BlobTXT_DeudasImpagasBCP"
                }
            ],
            "transformations": [
                {
                    "name": "FilterNullValues",
                    "description": "Se estÃ¡n filtrando las filas mediante las expresiones de las columnas \"idc, cic, lastname\"."
                },
                {
                    "name": "JoinCodClave"
                },
                {
                    "name": "TransformNARatingBCPAndNARiskclassif"
                },
                {
                    "name": "SelecColumns"
                },
                {
                    "name": "TransformOrigin"
                },
                {
                    "name": "DistinctRows"
                },
                {
                    "name": "SelectColumns2"
                }
            ],
            "scriptLines": [
                "source(output(",
                "          codclave as string,",
                "          idc as string,",
                "          cic as string,",
                "          name as string,",
                "          lastname as string,",
                "          motherlastname as string,",
                "          typeclient as string,",
                "          banking as string,",
                "          officecode as string,",
                "          fmtname as string,",
                "          birthday as string,",
                "          ratingbcp as string,",
                "          dateprocess as string,",
                "          tipfrecuenciaregistro as string",
                "     ),",
                "     allowSchemaDrift: true,",
                "     validateSchema: false,",
                "     ignoreNoFilesFound: false,",
                "     format: 'parquet') ~> UDClient",
                "source(output(",
                "          codclave as string,",
                "          reason as string,",
                "          detail as string,",
                "          account as string,",
                "          accountsystem as string,",
                "          dateregistry as string,",
                "          dateprocess as string,",
                "          codebank as string,",
                "          amount as string,",
                "          currency as string,",
                "          riskclassif as string,",
                "          typecredit as string,",
                "          joint as string,",
                "          origin as integer",
                "     ),",
                "     allowSchemaDrift: true,",
                "     validateSchema: false,",
                "     ignoreNoFilesFound: false,",
                "     format: 'parquet') ~> UDUnpaidDebt",
                "UDClient filter(!isNull(idc) && !isNull(cic) && !isNull(lastname)) ~> FilterNullValues",
                "FilterNullValues, TransformOrigin join(UDClient@codclave == UDUnpaidDebt@codclave,",
                "     joinType:'inner',",
                "     matchType:'exact',",
                "     ignoreSpaces: false,",
                "     broadcast: 'auto')~> JoinCodClave",
                "JoinCodClave derive(NARatingBCP = case(trim(ratingbcp) == \"NA\",toString(null()),toString(ratingbcp)),",
                "          NARiskclassif = case(trim(riskclassif) == \"NA\",toString(null()),toString(riskclassif))) ~> TransformNARatingBCPAndNARiskclassif",
                "TransformNARatingBCPAndNARiskclassif select(mapColumn(",
                "          idc,",
                "          cic,",
                "          name,",
                "          lastname,",
                "          motherlastname,",
                "          typeclient,",
                "          banking,",
                "          officecode,",
                "          fmtname,",
                "          birthday,",
                "          ratingbcp = NARatingBCP,",
                "          dateprocess = UDClient@dateprocess,",
                "          tipfrecuenciaregistro,",
                "          reason,",
                "          detail,",
                "          origin = TransformOrigin,",
                "          account,",
                "          accountsystem,",
                "          dateregistry,",
                "          codebank,",
                "          amount,",
                "          currency,",
                "          riskclassif = NARiskclassif",
                "     ),",
                "     skipDuplicateMapInputs: true,",
                "     skipDuplicateMapOutputs: true) ~> SelecColumns",
                "UDUnpaidDebt derive(TransformOrigin = lpad(toString(origin),3,'0')) ~> TransformOrigin",
                "SelecColumns aggregate(groupBy(mycols = sha2(256,columns())),",
                "     each(match(true()), $$ = first($$))) ~> DistinctRows",
                "DistinctRows select(mapColumn(",
                "          idc,",
                "          cic,",
                "          name,",
                "          lastname,",
                "          motherlastname,",
                "          typeclient,",
                "          banking,",
                "          officecode,",
                "          fmtname,",
                "          birthday,",
                "          ratingbcp,",
                "          dateprocess,",
                "          tipfrecuenciaregistro,",
                "          reason,",
                "          detail,",
                "          origin,",
                "          account,",
                "          accountsystem,",
                "          dateregistry,",
                "          codebank,",
                "          amount,",
                "          currency,",
                "          riskclassif",
                "     ),",
                "     skipDuplicateMapInputs: true,",
                "     skipDuplicateMapOutputs: true) ~> SelectColumns2",
                "SelectColumns2 sink(allowSchemaDrift: true,",
                "     validateSchema: false,",
                "     partitionFileNames:['UNPAID_DEBT_BCP.txt'],",
                "     skipDuplicateMapInputs: true,",
                "     skipDuplicateMapOutputs: true,",
                "     partitionBy('hash', 1)) ~> ExportarBlobTXT"
            ]
        }
    }
}